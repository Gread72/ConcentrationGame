package com.gread.games.concentration.view{	/*		Class GamePlayView - Sprite		View for game interaction and interface	*/	import com.gread.DisplayObjectHelper;	import com.gread.games.concentration.model.vo.GameCardVO;		import flash.display.Sprite;	import flash.events.MouseEvent;		import org.osflash.signals.Signal;
		public class GamePlayView extends Sprite{				/* Private and Public variables */		static private var SPACING:Number = 5;		public var gridBuiltComplete:Signal = new Signal();		public var selectMemoryCard:Signal = new Signal();				/* constructor function */		public function GamePlayView() { }				/*			function buildGrid			build grid of memory card components			@param numRows Number			@param numCols Number			@param dataProvider Vector.<GameCardVO>			@return void		*/		public function buildGrid(numRows:Number, numCols:Number, dataProvider:Vector.<GameCardVO>):void{			var cardCount:Number = 0;			var currentX:Number = 0;			var currentY:Number = 0;						DisplayObjectHelper.removeAllChildrenElements(this);						for(var row:Number = 0; row < numRows; row++){				for(var col:Number = 0; col < numCols; col++){					if(cardCount < dataProvider.length){						createMemoryCard(dataProvider[cardCount], currentX, currentY);						cardCount++;						currentX = currentX + MemoryCard.WIDTH + SPACING;					}				}				currentX = 0;				currentY = currentY + MemoryCard.HEIGHT + SPACING;			}						hideMemoryCards();						gridBuiltComplete.dispatch();		}				/*			function createMemoryCard			Create the instances of the memory card components			@param valueObj:GameCardVO			@param xPos:Number			@param yPos:Number			@return MemoryCard		*/		private function createMemoryCard(valueObj:GameCardVO, xPos:Number = 0, yPos:Number = 0):MemoryCard{			var gc:MemoryCard = new MemoryCard(valueObj);			this.addChild(gc);			gc.addEventListener(MouseEvent.CLICK, onClickMemoryCard);			gc.x = xPos;			gc.y = yPos;			return gc;		}				/*			function onClickMemoryCard			Event Handler for Clicking Memory Card component			@param evt MouseEvent			@return void		*/		private function onClickMemoryCard(evt:MouseEvent):void{			selectMemoryCard.dispatch(evt.currentTarget);		}				private function hideMemoryCards():void{			for(var i:Number = 0; i < this.numChildren; i++){				if( this.getChildAt(i) is MemoryCard ){					MemoryCard(this.getChildAt(i)).hideMemoryCard();				}			}		}	}	}